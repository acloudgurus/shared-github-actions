---
name: Python Unit Test
inputs:
  toml_parent_dir:
    description: Parent directory of Pyproject TOML. Can be comma-separated for multiple pytest location runs.
    required: false
    default: .
  debug_mode:
    description: Debug Mode
    required: false
    default: false
    type: boolean
  environment_usage:
    description: If running pytest within a shell, specify shell
    required: false
    default: pip
    type: choice
    options:
      - pip
      - poetry
      - pipenv
  additional_args:
    description: Arguments for pytest run (e.g. -s -l)
    required: false
    default: ""
  coverage_gate:
    description: Code Coverage Gate checked after pytest. Minimum quality gate is 80%.
    required: false
    default: 80

outputs:
  junit_report_path:
    description: "Location of Report XML generated by Pytest. Comma-separated paths if multiple pytest locations run."
    value: ${{ steps.pytest.outputs.REPORT_XML_LOCATION }}
  coverage_report_path:
    description: "Location of HTML Coverage Report generated by coverage, accumulates coverage of all runs."
    value: ${{ steps.pytest.outputs.COVERAGE_REPORT_LOCATION }}
  coverage_score:
    description: "Percentage of total coverage generated by coverage report."
    value: ${{ steps.pytest.outputs.COVERAGE_SCORE }}

permissions:
  contents: read
runs:
  using: composite
  steps:
    - name: Test with pytest
      id: pytest
      env:
        DEBUG_MODE: ${{ inputs.debug_mode }}
        PYPROJECT_TOML_DIR: ${{ inputs.toml_parent_dir }}
        SHELL_ENV: ${{ inputs.environment_usage }}
        ADDITIONAL_ARGS: ${{ inputs.additional_args }}
        QUALITY_GATE: ${{ fromJSON(inputs.coverage_gate) < 80 && 80 || fromJSON(inputs.coverage_gate) }}
      shell: bash
      run: |
        set -x
        IFS=, read -a py_tomls <<< "$PYPROJECT_TOML_DIR"
        COVERAGE_FILE="$(realpath .)/.coverage"

        for i in "${!py_tomls[@]}"; do
          echo "running pytests for path ${py_tomls[i]}"
          
          pushd ${py_tomls[i]}

          if ${DEBUG_MODE}; then
            ADDITIONAL_ARGS="${ADDITIONAL_ARGS} -rxs"
          else
            ADDITIONAL_ARGS="${ADDITIONAL_ARGS} -rx"
          fi
          if [ "$SHELL_ENV" != "pip" ];then
            SHELL_PREFIX="${SHELL_ENV} run"
            if [ "$SHELL_ENV" == "poetry" ];then
              poetry add coverage
            fi
          fi
          
          ${SHELL_PREFIX} coverage run --append --source=. --data-file=${COVERAGE_FILE} -m pytest ${ADDITIONAL_ARGS} --junit-xml=reports/python_tests/report.xml
          ${SHELL_PREFIX} coverage html --data-file=${COVERAGE_FILE}
          if [ -z "$XML_LOCATION" ];then
            XML_LOCATION="$(realpath reports/python_tests/report.xml)"
          else
            XML_LOCATION="$XML_LOCATION,$(realpath ./dist)"
          fi
          COVERAGE_REPORT_LOCATION="$(realpath htmlcov/index.html)"
          echo "REPORT_XML_LOCATION=${XML_LOCATION}" >> "$GITHUB_OUTPUT"
          echo "COVERAGE_REPORT_LOCATION=${COVERAGE_REPORT_LOCATION}" >> "$GITHUB_OUTPUT"
          COV_SCORE=$(coverage json --data-file=${COVERAGE_FILE} -q -o /dev/stdout | jq .totals.percent_covered | jq '.*100|round/100')
          echo "COVERAGE_SCORE=${COV_SCORE}" >> "$GITHUB_OUTPUT"
          ${SHELL_PREFIX} coverage report --data-file=${COVERAGE_FILE} -m --fail-under ${QUALITY_GATE}
          popd
        done
    - name: Publish Coverage score
      if: success() || failure()
      env: 
        COV_SCORE: ${{ steps.pytest.outputs.COVERAGE_SCORE }}
      shell: bash
      run:  | 
        echo "### Coverage Score : ${COV_SCORE}%" >> $GITHUB_STEP_SUMMARY
